import { __awaiter } from "tslib";
import { FilePropertyManager } from "../FilePropertyManager";
import { Utils } from "src/Utils";
import { FormInterface } from "../parser/FormInterfaces";
export class ListHtmlGenerator {
    constructor(plugin) {
        this.plugin = plugin;
    }
    generateEditHtmlCode(field) {
        const label = FormInterface.getPropertyValueFromField(field, 'label');
        const placeholder = FormInterface.getPropertyValueFromField(field, 'placeholder');
        const datalist = FormInterface.getPropertyValueFromField(field, 'datalist');
        const link = FormInterface.getPropertyValueFromField(field, 'link');
        console.log(`Generating text field: ${field.name}`);
        return `
        <div class="form-group form-input list" id="${field.name}" data-field="true">
            <label for="children-list">${label} : <label id="${field.name}-sum"/></label>
            <button id="${field.name}-addbtn" class="btn-list">➕</button></label>
            <input type="hidden" id="${field.name}-placeholder" value="${placeholder}">
            <input type="hidden" id="${field.name}-datalist" value="${datalist}">
            <input type="hidden" id="${field.name}-link" value="${link}">
            <ul id="${field.name}-list" class="grid-container">
            </ul>
        </div>
        `;
    }
    refresh(file, field) {
        return __awaiter(this, void 0, void 0, function* () {
            const eltList = (yield FilePropertyManager.readProperty(file, field.id)) || "";
            if (eltList instanceof Array) {
                eltList.forEach((elt) => {
                    console.log("Elt:", elt);
                    this.createElement(field, file);
                });
                this.setEltList(field, eltList);
                this.updateSumElt(field);
            }
        });
    }
    updateSumElt(field) {
        const sumElt = field.querySelector(`#${field.id}-sum`);
        if (sumElt) {
            const eltList = this.getEltList(field);
            sumElt.innerHTML = eltList.length.toString();
        }
    }
    initialize(file, field) {
        return __awaiter(this, void 0, void 0, function* () {
            const addBtn = field.querySelector(`#${field.id}-addbtn`);
            if (addBtn && addBtn instanceof HTMLButtonElement) {
                Utils.addDebouncedEventListener(addBtn, "click", () => __awaiter(this, void 0, void 0, function* () {
                    this.createElement(field, file);
                }));
            }
        });
    }
    createElement(field, file) {
        const list = field.querySelector(`#${field.id}-list`);
        const elt = document.createElement(`${field.id}-elt`);
        const placeholderField = field.querySelector(`#${field.id}-placeholder`);
        const datalistField = field.querySelector(`#${field.id}-datalist`);
        const linkField = field.querySelector(`#${field.id}-link`);
        if (list && elt && list instanceof HTMLUListElement && placeholderField && datalistField && linkField) {
            elt.classList.add("child-entry");
            const placeholder = placeholderField.getAttribute("value");
            const datalist = datalistField.getAttribute("value");
            const link = datalistField.getAttribute("value");
            console.log("Placeholder:", placeholder);
            console.log("Datalist:", datalist);
            elt.innerHTML = `
                <input type="text" id="${field.id}-field" class="children-field" placeholder="${placeholder}" list="${datalist}" data-link="${link}">
                <button id="${field.id}-elt-rmbtn" class="btn-list">❌</button>
            `;
            // element delete button
            const deleteBtn = elt.querySelector(`#${field.id}-elt-rmbtn`);
            if (deleteBtn) {
                deleteBtn.addEventListener("click", () => {
                    elt.remove();
                    this.updateProperty(file, field);
                    this.updateSumElt(field);
                });
            }
            list.appendChild(elt);
            // element field
            const eltField = elt.querySelector(`#${field.id}-field`);
            if (eltField && eltField instanceof HTMLInputElement) {
                eltField.addEventListener("input", () => __awaiter(this, void 0, void 0, function* () {
                    console.log("Input value:", eltField.value);
                    this.updateProperty(file, field);
                    this.updateSumElt(field);
                }));
            }
            list.appendChild(elt);
        }
    }
    updateProperty(file, field) {
        return __awaiter(this, void 0, void 0, function* () {
            const listElt = this.getEltList(field);
            yield FilePropertyManager.updateProperty(file, field.id, listElt);
        });
    }
    getEltList(field) {
        const eltFields = field.querySelectorAll("input:not([type='hidden'])");
        const children = [];
        eltFields.forEach((elt) => {
            if (elt instanceof HTMLInputElement) {
                let value = elt.value;
                if (value) {
                    if (elt.dataset.link) {
                        value = "[[" + value + "]]";
                    }
                    children.push(value);
                }
            }
        });
        return children;
    }
    setEltList(field, list) {
        const eltFields = field.querySelectorAll("input:not([type='hidden'])");
        eltFields.forEach((elt, index) => {
            if (elt instanceof HTMLInputElement) {
                elt.value = list[index].toString().replace("[[", "").replace("]]", "");
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,