import { __awaiter } from "tslib";
import { FormInterface } from "../parser/FormInterfaces";
export class DataListHtmlGenerator {
    constructor(plugin) {
        this.plugin = plugin;
    }
    generateEditHtmlCode(datalist) {
        const tag = FormInterface.getPropertyValueFromDatalist(datalist, 'tag');
        const values = FormInterface.getPropertyValueFromDatalist(datalist, 'values');
        console.log(`Generating datalist: ${datalist.name}`);
        let datalistHTML = `<datalist id="${datalist.name}">\n`;
        if (values && Array.isArray(values)) {
            values.forEach(value => {
                datalistHTML += `    <option value="${value}"></option>\n`;
            });
        }
        if (tag && typeof tag === 'string') {
            const pagesWithTag = this.getTaggedItems(tag);
            pagesWithTag.forEach(page => {
                datalistHTML += `    <option value="${page}"></option>\n`;
            });
        }
        datalistHTML += `</datalist>\n`;
        console.log('Generated datalist:', datalistHTML);
        return datalistHTML;
    }
    refresh(el) {
        return __awaiter(this, void 0, void 0, function* () {
            // Noting to do
        });
    }
    getTaggedItems(tag) {
        var _a, _b;
        const items = [];
        const files = this.plugin.app.vault.getFiles();
        for (const file of files) {
            const cache = this.plugin.app.metadataCache.getFileCache(file);
            if ((_b = (_a = cache === null || cache === void 0 ? void 0 : cache.frontmatter) === null || _a === void 0 ? void 0 : _a.tags) === null || _b === void 0 ? void 0 : _b.includes(tag)) {
                items.push(file.basename);
            }
        }
        return items;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YUxpc3RIdG1sR2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21hcmtkb3duL2h0bWwvRGF0YUxpc3RIdG1sR2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQVksYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFbkUsTUFBTSxPQUFPLHFCQUFxQjtJQUc5QixZQUFZLE1BQW1CO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxRQUFrQjtRQUNuQyxNQUFNLEdBQUcsR0FBRyxhQUFhLENBQUMsNEJBQTRCLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFOUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFFckQsSUFBSSxZQUFZLEdBQUcsaUJBQWlCLFFBQVEsQ0FBQyxJQUFJLE1BQU0sQ0FBQztRQUV4RCxJQUFJLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDbkIsWUFBWSxJQUFJLHNCQUFzQixLQUFLLGVBQWUsQ0FBQztZQUMvRCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7UUFFRCxJQUFJLEdBQUcsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUNqQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzlDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3hCLFlBQVksSUFBSSxzQkFBc0IsSUFBSSxlQUFlLENBQUM7WUFDOUQsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO1FBRUQsWUFBWSxJQUFJLGVBQWUsQ0FBQztRQUVoQyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2pELE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUFFSyxPQUFPLENBQUMsRUFBZTs7WUFDekIsZUFBZTtRQUNuQixDQUFDO0tBQUE7SUFFRCxjQUFjLENBQUMsR0FBVzs7UUFDdEIsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO1FBQzNCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUUvQyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ3ZCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0QsSUFBSSxNQUFBLE1BQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLFdBQVcsMENBQUUsSUFBSSwwQ0FBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDMUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUIsQ0FBQztRQUNMLENBQUM7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTm92ZWxQbHVnaW4gZnJvbSBcInNyYy9tYWluXCI7XHJcbmltcG9ydCB7IERhdGFsaXN0LCBGb3JtSW50ZXJmYWNlIH0gZnJvbSBcIi4uL3BhcnNlci9Gb3JtSW50ZXJmYWNlc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIERhdGFMaXN0SHRtbEdlbmVyYXRvciB7XHJcbiAgICBwcml2YXRlIHBsdWdpbjogTm92ZWxQbHVnaW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBOb3ZlbFBsdWdpbikge1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlRWRpdEh0bWxDb2RlKGRhdGFsaXN0OiBEYXRhbGlzdCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgdGFnID0gRm9ybUludGVyZmFjZS5nZXRQcm9wZXJ0eVZhbHVlRnJvbURhdGFsaXN0KGRhdGFsaXN0LCAndGFnJyk7XHJcbiAgICAgICAgY29uc3QgdmFsdWVzID0gRm9ybUludGVyZmFjZS5nZXRQcm9wZXJ0eVZhbHVlRnJvbURhdGFsaXN0KGRhdGFsaXN0LCAndmFsdWVzJyk7XHJcbiAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyhgR2VuZXJhdGluZyBkYXRhbGlzdDogJHtkYXRhbGlzdC5uYW1lfWApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBkYXRhbGlzdEhUTUwgPSBgPGRhdGFsaXN0IGlkPVwiJHtkYXRhbGlzdC5uYW1lfVwiPlxcbmA7XHJcbiAgICBcclxuICAgICAgICBpZiAodmFsdWVzICYmIEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xyXG4gICAgICAgICAgICB2YWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkYXRhbGlzdEhUTUwgKz0gYCAgICA8b3B0aW9uIHZhbHVlPVwiJHt2YWx1ZX1cIj48L29wdGlvbj5cXG5gO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBpZiAodGFnICYmIHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhZ2VzV2l0aFRhZyA9IHRoaXMuZ2V0VGFnZ2VkSXRlbXModGFnKTtcclxuICAgICAgICAgICAgcGFnZXNXaXRoVGFnLmZvckVhY2gocGFnZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkYXRhbGlzdEhUTUwgKz0gYCAgICA8b3B0aW9uIHZhbHVlPVwiJHtwYWdlfVwiPjwvb3B0aW9uPlxcbmA7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGRhdGFsaXN0SFRNTCArPSBgPC9kYXRhbGlzdD5cXG5gO1xyXG4gICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coJ0dlbmVyYXRlZCBkYXRhbGlzdDonLCBkYXRhbGlzdEhUTUwpO1xyXG4gICAgICAgIHJldHVybiBkYXRhbGlzdEhUTUw7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGFzeW5jIHJlZnJlc2goZWw6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgLy8gTm90aW5nIHRvIGRvXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGFnZ2VkSXRlbXModGFnOiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgY29uc3QgaXRlbXM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0RmlsZXMoKTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5wbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGU/LmZyb250bWF0dGVyPy50YWdzPy5pbmNsdWRlcyh0YWcpKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGZpbGUuYmFzZW5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpdGVtcztcclxuICAgIH1cclxufVxyXG4iXX0=