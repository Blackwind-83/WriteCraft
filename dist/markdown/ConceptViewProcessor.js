import { __awaiter } from "tslib";
export class ConceptViewProcessor {
    constructor(plugin) {
        this.plugin = plugin;
    }
    load() {
        this.plugin.registerPriorityMarkdownPostProcessor(-100, (el, ctx) => __awaiter(this, void 0, void 0, function* () {
            const sectionInfo = ctx.getSectionInfo(el);
            if (!sectionInfo) {
                return;
            }
            // Log pour vérifier si l'élément contient un bloc "organigrame"
            console.log("Markdown Element:", el.getHTML());
            const codeBlock = el.innerText;
            console.log("Code Block Content:", codeBlock);
            const content = codeBlock.trim();
            console.log("content Extracted:", content);
            // Génère le HTML interactif
            const div = document.createElement("div");
            div.className = "writecraft-overlay"; // Classe pour styliser
            div.innerHTML = this.generateInteractiveHTML(content);
            // Ajoute la superposition au DOM
            el.style.position = "relative"; // Nécessaire pour positionner la superposition
            el.innerHTML = "";
            el.appendChild(div);
        }));
    }
    /**
      * Génère du HTML interactif à partir du contenu Markdown.
      */
    generateInteractiveHTML(content) {
        const lines = content
            .split("\n")
            .map((line) => line.trim())
            .filter((line) => line);
        let html = content; //"<div class='fiche-personnage'>";
        console.log("--------");
        lines.forEach((line) => {
            const field = this.parseField(line);
            if (field) {
                const result = this.renderField(field);
                console.log("###### " + line + "=> " + field.type);
                console.log("## AVANT : " + +html);
                console.log("############################" + field.type);
                if (field.type != "link") {
                    html = html.replace(line, result);
                }
                console.log("## APRES : " + +html);
            }
        });
        console.log("--------");
        //html += "</div>";
        return html;
    }
    /**
     * Analyse une ligne Markdown et retourne un objet Field correspondant.
     */
    parseField(line) {
        // Radio
        console.log("parseField=>" + line);
        const radioMatch = line.match(/(\w+)\((.+?)\): ?(.*)/);
        if (radioMatch) {
            return {
                type: "radio",
                name: radioMatch[1],
                options: radioMatch[2].split(",").map((o) => o.trim()),
                value: radioMatch[3].trim(),
            };
        }
        // Checkbox
        const checkboxMatch = line.match(/(\w+)\[(.+?)\]: ?(.*)/);
        if (checkboxMatch) {
            return {
                type: "checkbox",
                name: checkboxMatch[1],
                options: checkboxMatch[2].split(",").map((o) => o.trim()),
                values: checkboxMatch[3].split(",").map((o) => o.trim()),
            };
        }
        // Combobox
        const comboboxMatch = line.match(/(\w+)\{(.+?)\}: ?(.*)/);
        if (comboboxMatch) {
            return {
                type: "combobox",
                name: comboboxMatch[1],
                options: comboboxMatch[2].split(",").map((o) => o.trim()),
                value: comboboxMatch[3].trim(),
            };
        }
        // Link
        const linkMatch = line.match(/(\w+): \[\[(.+?)\]\]/);
        if (linkMatch) {
            console.log("LinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLinkLink");
            return {
                type: "link",
                name: linkMatch[1],
                value: linkMatch[2],
            };
        }
        // Number
        const numberMatch = line.match(/(\w+): ?(\d+)/);
        console.log("NumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber");
        if (numberMatch) {
            return {
                type: "number",
                name: numberMatch[1],
                value: parseInt(numberMatch[2], 10),
            };
        }
        // Date
        const dateMatch = line.match(/(\w+): ?(\d{4}-\d{2}-\d{2})/);
        if (dateMatch) {
            console.log("DateDateDateDateDateDateDateDateDateDateDateDateDateDateDateDateDateDateDateDate");
            return {
                type: "date",
                name: dateMatch[1],
                value: dateMatch[2],
            };
        }
        // String
        const stringMatch = line.match(/(\w+): ?(.*)/);
        if (stringMatch) {
            console.log("StringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString");
            return {
                type: "string",
                name: stringMatch[1],
                value: stringMatch[2].trim(),
            };
        }
        return null;
    }
    /**
     * Rend un champ HTML en fonction de son type.
     */
    renderField(field) {
        console.log("renderField=>" + field.type);
        switch (field.type) {
            case "radio":
                return `
                <p><strong>${field.name} :</strong>
                    ${field.options
                    .map((option) => `<label>
                                    <input type="radio" name="${field.name}" value="${option}" ${option === field.value ? "checked" : ""} /> ${option}
                                </label>`)
                    .join("")}
                </p>
            `;
            case "checkbox":
                return `
                <p><strong>${field.name} :</strong>
                    ${field.options
                    .map((option) => `<label>
                                    <input type="checkbox" name="${field.name}" value="${option}" ${field.values.includes(option) ? "checked" : ""} /> ${option}
                                </label>`)
                    .join("")}
                </p>
            `;
            case "combobox":
                return `
                <p><strong>${field.name} :</strong>
                    <select name="${field.name}">
                        ${field.options
                    .map((option) => `<option value="${option}" ${option === field.value ? "selected" : ""}>${option}</option>`)
                    .join("")}
                    </select>
                </p>
            `;
            case "string":
                return `
                <p><strong>${field.name} :</strong>
                    <input type="text" name="${field.name}" value="${field.value}" />
                </p>
            `;
            case "number":
                return `
                <p><strong>${field.name} :</strong>
                    <input type="number" name="${field.name}" value="${field.value}" />
                </p>
            `;
            case "date":
                return `
                <p><strong>${field.name} :</strong>
                    <input type="date" name="${field.name}" value="${field.value}" />
                </p>
            `;
            case "link":
                return `
                <p><strong>${field.name} :</strong>
                    <a href="${field.value}" target="_blank">${field.value}</a>
                </p>
            `;
            default:
                return "";
        }
    }
}
//# sourceMappingURL=data:application/json;base64,