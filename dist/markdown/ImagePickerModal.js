import { __awaiter } from "tslib";
import { Modal } from "obsidian";
export class ImagePickerModal extends Modal {
    constructor(app, images, onSelect) {
        super(app);
        this.images = images;
        this.onSelect = onSelect;
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            const { contentEl } = this;
            contentEl.createEl("h2", { text: "Choisir une image" });
            for (const imageFile of this.images) {
                const imagePath = yield this.convertPathToUrl(imageFile); // Attendre que l'URL soit générée
                const img = contentEl.createEl("img", {
                    attr: { src: imagePath },
                    cls: "image-option",
                });
                img.style.width = "80px";
                img.style.margin = "5px";
                img.style.cursor = "pointer";
                img.addEventListener("click", () => {
                    this.onSelect(imageFile);
                    this.close();
                });
            }
        });
    }
    onClose() {
        this.contentEl.empty();
    }
    convertPathToUrl(imageFile) {
        console.log(`Tentative de conversion du chemin en URL pour : ${imageFile.path}`);
        return this.app.vault.readBinary(imageFile).then((data) => {
            console.log(`Données binaires lues pour ${imageFile.path}`);
            const blob = new Blob([data]);
            const url = URL.createObjectURL(blob);
            console.log(`URL créée : ${url}`);
            return url; // Créer l'URL
        }).catch((err) => {
            console.error("Erreur lors de la lecture du fichier :", err);
            return "_images/unknown.png"; // Retourner l'image par défaut en cas d'erreur
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2VQaWNrZXJNb2RhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXJrZG93bi9JbWFnZVBpY2tlck1vZGFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQU8sS0FBSyxFQUFrQixNQUFNLFVBQVUsQ0FBQztBQUV0RCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsS0FBSztJQUl2QyxZQUFZLEdBQVEsRUFBRSxNQUFlLEVBQUUsUUFBK0I7UUFDbEUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUVLLE1BQU07O1lBQ1IsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQztZQUMzQixTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQUM7WUFFeEQsS0FBSyxNQUFNLFNBQVMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ2xDLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsa0NBQWtDO2dCQUM1RixNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtvQkFDbEMsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRTtvQkFDeEIsR0FBRyxFQUFFLGNBQWM7aUJBQ3RCLENBQUMsQ0FBQztnQkFDSCxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7Z0JBQ3pCLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQkFDekIsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO2dCQUU3QixHQUFHLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtvQkFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDekIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNqQixDQUFDLENBQUMsQ0FBQztZQUNQLENBQUM7UUFDTCxDQUFDO0tBQUE7SUFFRCxPQUFPO1FBQ0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRU0sZ0JBQWdCLENBQUMsU0FBZ0I7UUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtREFBbUQsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDakYsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDdEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7WUFDNUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDbEMsT0FBTyxHQUFHLENBQUMsQ0FBQyxjQUFjO1FBQzlCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM3RCxPQUFPLHFCQUFxQixDQUFDLENBQUMsK0NBQStDO1FBQ2pGLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwLCBNb2RhbCwgU2V0dGluZywgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBJbWFnZVBpY2tlck1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gICAgaW1hZ2VzOiBURmlsZVtdO1xyXG4gICAgb25TZWxlY3Q6IChmaWxlOiBURmlsZSkgPT4gdm9pZDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgaW1hZ2VzOiBURmlsZVtdLCBvblNlbGVjdDogKGZpbGU6IFRGaWxlKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgICB0aGlzLmltYWdlcyA9IGltYWdlcztcclxuICAgICAgICB0aGlzLm9uU2VsZWN0ID0gb25TZWxlY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb25PcGVuKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogXCJDaG9pc2lyIHVuZSBpbWFnZVwiIH0pO1xyXG4gICAgXHJcbiAgICAgICAgZm9yIChjb25zdCBpbWFnZUZpbGUgb2YgdGhpcy5pbWFnZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgaW1hZ2VQYXRoID0gYXdhaXQgdGhpcy5jb252ZXJ0UGF0aFRvVXJsKGltYWdlRmlsZSk7IC8vIEF0dGVuZHJlIHF1ZSBsJ1VSTCBzb2l0IGfDqW7DqXLDqWVcclxuICAgICAgICAgICAgY29uc3QgaW1nID0gY29udGVudEVsLmNyZWF0ZUVsKFwiaW1nXCIsIHtcclxuICAgICAgICAgICAgICAgIGF0dHI6IHsgc3JjOiBpbWFnZVBhdGggfSxcclxuICAgICAgICAgICAgICAgIGNsczogXCJpbWFnZS1vcHRpb25cIixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGltZy5zdHlsZS53aWR0aCA9IFwiODBweFwiO1xyXG4gICAgICAgICAgICBpbWcuc3R5bGUubWFyZ2luID0gXCI1cHhcIjtcclxuICAgICAgICAgICAgaW1nLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblNlbGVjdChpbWFnZUZpbGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIG9uQ2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIGNvbnZlcnRQYXRoVG9VcmwoaW1hZ2VGaWxlOiBURmlsZSk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFRlbnRhdGl2ZSBkZSBjb252ZXJzaW9uIGR1IGNoZW1pbiBlbiBVUkwgcG91ciA6ICR7aW1hZ2VGaWxlLnBhdGh9YCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnZhdWx0LnJlYWRCaW5hcnkoaW1hZ2VGaWxlKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBEb25uw6llcyBiaW5haXJlcyBsdWVzIHBvdXIgJHtpbWFnZUZpbGUucGF0aH1gKTtcclxuICAgICAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtkYXRhXSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVUkwgY3LDqcOpZSA6ICR7dXJsfWApO1xyXG4gICAgICAgICAgICByZXR1cm4gdXJsOyAvLyBDcsOpZXIgbCdVUkxcclxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJldXIgbG9ycyBkZSBsYSBsZWN0dXJlIGR1IGZpY2hpZXIgOlwiLCBlcnIpO1xyXG4gICAgICAgICAgICByZXR1cm4gXCJfaW1hZ2VzL3Vua25vd24ucG5nXCI7IC8vIFJldG91cm5lciBsJ2ltYWdlIHBhciBkw6lmYXV0IGVuIGNhcyBkJ2VycmV1clxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==