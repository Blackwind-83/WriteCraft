import { __awaiter } from "tslib";
import { TFile } from "obsidian";
import { ModelReader } from "src/model/ModelReader";
import { FormParser } from "./parser/FormParser";
import { FilePropertyManager } from "./FilePropertyManager";
import { FormHtmlGenerator } from "./html/FormHtmlGenerator";
import { Logger } from "../logger/Logger";
export class ConceptEditProcessor {
    constructor(plugin) {
        this.plugin = plugin;
        this.modelReader = new ModelReader(this.plugin);
        this.modelReader.loadModel();
        this.formParser = new FormParser();
        this.formHtmlGenerator = new FormHtmlGenerator(this.plugin);
        new FilePropertyManager(this.plugin); // Initialize the static plugin reference
        Logger.setLevel(Logger.levels.INFO); // Set the desired log level
    }
    load() {
        this.plugin.registerMarkdownCodeBlockProcessor("writecraft", (source, el, ctx) => __awaiter(this, void 0, void 0, function* () {
            Logger.info("writecraft block detected, source: " + source);
            // Retrieve the current file
            const file = ctx.sourcePath ? this.plugin.app.vault.getAbstractFileByPath(ctx.sourcePath) : null;
            if (!(file instanceof TFile)) {
                Logger.warn("File not found or invalid: " + ctx.sourcePath);
                return;
            }
            // Parse the source
            const parsedData = this.formParser.parse(source);
            const formHTML = this.formHtmlGenerator.generateEditHtmlCode(parsedData);
            el.innerHTML = formHTML;
            // Initialize and refresh the form
            this.formHtmlGenerator.initialize(file, el);
            this.formHtmlGenerator.refresh(file, el);
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uY2VwdEVkaXRQcm9jZXNzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFya2Rvd24vQ29uY2VwdEVkaXRQcm9jZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFakMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFMUMsTUFBTSxPQUFPLG9CQUFvQjtJQU03QixZQUFZLE1BQW1CO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1RCxJQUFJLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLHlDQUF5QztRQUMvRSxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyw0QkFBNEI7SUFDckUsQ0FBQztJQUVELElBQUk7UUFDQSxJQUFJLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxDQUFDLFlBQVksRUFBRSxDQUFPLE1BQU0sRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDbkYsTUFBTSxDQUFDLElBQUksQ0FBQyxxQ0FBcUMsR0FBRyxNQUFNLENBQUMsQ0FBQztZQUU1RCw0QkFBNEI7WUFDNUIsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2pHLElBQUksQ0FBQyxDQUFDLElBQUksWUFBWSxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLDZCQUE2QixHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDNUQsT0FBTztZQUNYLENBQUM7WUFFRCxtQkFBbUI7WUFDbkIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3pFLEVBQUUsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1lBRXhCLGtDQUFrQztZQUNsQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztZQUM1QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IE5vdmVsUGx1Z2luIGZyb20gXCJzcmMvbWFpblwiO1xyXG5pbXBvcnQgeyBNb2RlbFJlYWRlciB9IGZyb20gXCJzcmMvbW9kZWwvTW9kZWxSZWFkZXJcIjtcclxuaW1wb3J0IHsgRm9ybVBhcnNlciB9IGZyb20gXCIuL3BhcnNlci9Gb3JtUGFyc2VyXCI7XHJcbmltcG9ydCB7IEZpbGVQcm9wZXJ0eU1hbmFnZXIgfSBmcm9tIFwiLi9GaWxlUHJvcGVydHlNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IEZvcm1IdG1sR2VuZXJhdG9yIH0gZnJvbSBcIi4vaHRtbC9Gb3JtSHRtbEdlbmVyYXRvclwiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vbG9nZ2VyL0xvZ2dlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbmNlcHRFZGl0UHJvY2Vzc29yIHtcclxuICAgIHByaXZhdGUgcGx1Z2luOiBOb3ZlbFBsdWdpbjtcclxuICAgIHByaXZhdGUgbW9kZWxSZWFkZXI6IE1vZGVsUmVhZGVyO1xyXG4gICAgcHJpdmF0ZSBmb3JtUGFyc2VyOiBGb3JtUGFyc2VyO1xyXG4gICAgcHJpdmF0ZSBmb3JtSHRtbEdlbmVyYXRvcjogRm9ybUh0bWxHZW5lcmF0b3I7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBOb3ZlbFBsdWdpbikge1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgICAgIHRoaXMubW9kZWxSZWFkZXIgPSBuZXcgTW9kZWxSZWFkZXIodGhpcy5wbHVnaW4pO1xyXG4gICAgICAgIHRoaXMubW9kZWxSZWFkZXIubG9hZE1vZGVsKCk7XHJcbiAgICAgICAgdGhpcy5mb3JtUGFyc2VyID0gbmV3IEZvcm1QYXJzZXIoKTtcclxuICAgICAgICB0aGlzLmZvcm1IdG1sR2VuZXJhdG9yID0gbmV3IEZvcm1IdG1sR2VuZXJhdG9yKHRoaXMucGx1Z2luKTtcclxuICAgICAgICBuZXcgRmlsZVByb3BlcnR5TWFuYWdlcih0aGlzLnBsdWdpbik7IC8vIEluaXRpYWxpemUgdGhlIHN0YXRpYyBwbHVnaW4gcmVmZXJlbmNlXHJcbiAgICAgICAgTG9nZ2VyLnNldExldmVsKExvZ2dlci5sZXZlbHMuSU5GTyk7IC8vIFNldCB0aGUgZGVzaXJlZCBsb2cgbGV2ZWxcclxuICAgIH1cclxuXHJcbiAgICBsb2FkKCkge1xyXG4gICAgICAgIHRoaXMucGx1Z2luLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXCJ3cml0ZWNyYWZ0XCIsIGFzeW5jIChzb3VyY2UsIGVsLCBjdHgpID0+IHtcclxuICAgICAgICAgICAgTG9nZ2VyLmluZm8oXCJ3cml0ZWNyYWZ0IGJsb2NrIGRldGVjdGVkLCBzb3VyY2U6IFwiICsgc291cmNlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJldHJpZXZlIHRoZSBjdXJyZW50IGZpbGVcclxuICAgICAgICAgICAgY29uc3QgZmlsZSA9IGN0eC5zb3VyY2VQYXRoID8gdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChjdHguc291cmNlUGF0aCkgOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAoIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSB7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIud2FybihcIkZpbGUgbm90IGZvdW5kIG9yIGludmFsaWQ6IFwiICsgY3R4LnNvdXJjZVBhdGgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBQYXJzZSB0aGUgc291cmNlXHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZERhdGEgPSB0aGlzLmZvcm1QYXJzZXIucGFyc2Uoc291cmNlKTtcclxuICAgICAgICAgICAgY29uc3QgZm9ybUhUTUwgPSB0aGlzLmZvcm1IdG1sR2VuZXJhdG9yLmdlbmVyYXRlRWRpdEh0bWxDb2RlKHBhcnNlZERhdGEpO1xyXG4gICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBmb3JtSFRNTDtcclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgYW5kIHJlZnJlc2ggdGhlIGZvcm1cclxuICAgICAgICAgICAgdGhpcy5mb3JtSHRtbEdlbmVyYXRvci5pbml0aWFsaXplKGZpbGUsIGVsKTtcclxuICAgICAgICAgICAgdGhpcy5mb3JtSHRtbEdlbmVyYXRvci5yZWZyZXNoKGZpbGUsIGVsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSJdfQ==