export class PropertyParser {
    static parse(propertiesBlock) {
        const properties = [];
        let match;
        while ((match = this.propertyRegex.exec(propertiesBlock)) !== null) {
            let value = match[2].trim().replace(/"/g, '');
            if (value.startsWith('[') && value.endsWith(']')) {
                value = value.slice(1, -1).split(',').map(option => option.trim().replace(/"/g, ''));
            }
            else if (!isNaN(Number(value))) {
                value = Number(value);
            }
            properties.push({ name: match[1], value });
        }
        return properties;
    }
}
PropertyParser.propertyRegex = /(\w+)\s*=\s*("(?:[^"\\]|\\.)*"|\[.*?\]|[^;]*)/g;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvcGVydHlQYXJzZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbWFya2Rvd24vcGFyc2VyL1Byb3BlcnR5UGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sT0FBTyxjQUFjO0lBR3ZCLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBdUI7UUFDaEMsTUFBTSxVQUFVLEdBQW9CLEVBQUUsQ0FBQztRQUN2QyxJQUFJLEtBQUssQ0FBQztRQUVWLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUNqRSxJQUFJLEtBQUssR0FBMkMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFFdEYsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDL0MsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekYsQ0FBQztpQkFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQy9CLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUIsQ0FBQztZQUVELFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDL0MsQ0FBQztRQUVELE9BQU8sVUFBVSxDQUFDO0lBQ3RCLENBQUM7O0FBbkJ1Qiw0QkFBYSxHQUFHLGdEQUFnRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmllbGRQcm9wZXJ0eSB9IGZyb20gXCIuL0Zvcm1JbnRlcmZhY2VzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUHJvcGVydHlQYXJzZXIge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgcHJvcGVydHlSZWdleCA9IC8oXFx3KylcXHMqPVxccyooXCIoPzpbXlwiXFxcXF18XFxcXC4pKlwifFxcWy4qP1xcXXxbXjtdKikvZztcclxuXHJcbiAgICBzdGF0aWMgcGFyc2UocHJvcGVydGllc0Jsb2NrOiBzdHJpbmcpOiBGaWVsZFByb3BlcnR5W10ge1xyXG4gICAgICAgIGNvbnN0IHByb3BlcnRpZXM6IEZpZWxkUHJvcGVydHlbXSA9IFtdO1xyXG4gICAgICAgIGxldCBtYXRjaDtcclxuXHJcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IHRoaXMucHJvcGVydHlSZWdleC5leGVjKHByb3BlcnRpZXNCbG9jaykpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZTogc3RyaW5nIHwgc3RyaW5nW10gfCBudW1iZXIgfCB1bmRlZmluZWQgPSBtYXRjaFsyXS50cmltKCkucmVwbGFjZSgvXCIvZywgJycpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJ1snKSAmJiB2YWx1ZS5lbmRzV2l0aCgnXScpKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEsIC0xKS5zcGxpdCgnLCcpLm1hcChvcHRpb24gPT4gb3B0aW9uLnRyaW0oKS5yZXBsYWNlKC9cIi9nLCAnJykpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpc05hTihOdW1iZXIodmFsdWUpKSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBOdW1iZXIodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnB1c2goeyBuYW1lOiBtYXRjaFsxXSwgdmFsdWUgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcHJvcGVydGllcztcclxuICAgIH1cclxufVxyXG4iXX0=